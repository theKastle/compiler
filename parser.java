
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\006\003\000\002\006\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\006\000\002\005\006\000\002\011\005\000\002" +
    "\011\005\000\002\011\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\004\006\000" +
    "\002\007\005\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\004\011\005\001\002\000\004\002\062\001" +
    "\002\000\016\006\017\011\005\014\020\015\007\020\010" +
    "\022\016\001\002\000\004\002\000\001\002\000\004\006" +
    "\060\001\002\000\010\006\022\007\027\024\025\001\002" +
    "\000\004\012\054\001\002\000\020\006\017\011\005\012" +
    "\ufffe\014\020\015\007\020\010\022\016\001\002\000\020" +
    "\006\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\020\ufff9\022" +
    "\ufff9\001\002\000\020\006\ufffc\011\ufffc\012\ufffc\014\ufffc" +
    "\015\ufffc\020\ufffc\022\ufffc\001\002\000\020\006\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\015\ufffb\020\ufffb\022\ufffb\001\002" +
    "\000\010\006\022\007\027\024\025\001\002\000\004\013" +
    "\045\001\002\000\010\006\022\007\027\024\025\001\002" +
    "\000\020\006\ufffa\011\ufffa\012\ufffa\014\ufffa\015\ufffa\020" +
    "\ufffa\022\ufffa\001\002\000\024\016\uffee\017\uffee\021\uffee" +
    "\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\001" +
    "\002\000\024\016\ufff3\017\ufff3\021\ufff3\023\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\001\002\000\024\016" +
    "\ufff4\017\ufff4\021\ufff4\023\ufff4\025\ufff4\026\035\027\ufff4" +
    "\030\036\031\034\001\002\000\010\006\022\007\027\024" +
    "\025\001\002\000\010\016\030\017\031\027\032\001\002" +
    "\000\024\016\uffed\017\uffed\021\uffed\023\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\001\002\000\010\006\022" +
    "\007\027\024\025\001\002\000\020\006\uffeb\011\uffeb\012" +
    "\uffeb\014\uffeb\015\uffeb\020\uffeb\022\uffeb\001\002\000\010" +
    "\006\022\007\027\024\025\001\002\000\024\016\ufff5\017" +
    "\ufff5\021\ufff5\023\ufff5\025\ufff5\026\035\027\ufff5\030\036" +
    "\031\034\001\002\000\010\006\022\007\027\024\025\001" +
    "\002\000\010\006\022\007\027\024\025\001\002\000\010" +
    "\006\022\007\027\024\025\001\002\000\024\016\ufff1\017" +
    "\ufff1\021\ufff1\023\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\001\002\000\024\016\ufff2\017\ufff2\021\ufff2\023" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\001\002" +
    "\000\024\016\ufff0\017\ufff0\021\ufff0\023\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\001\002\000\024\016\ufff6" +
    "\017\ufff6\021\ufff6\023\ufff6\025\ufff6\026\035\027\ufff6\030" +
    "\036\031\034\001\002\000\010\016\030\025\044\027\032" +
    "\001\002\000\024\016\uffef\017\uffef\021\uffef\023\uffef\025" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\001\002\000\010" +
    "\006\022\007\027\024\025\001\002\000\010\016\030\017" +
    "\047\027\032\001\002\000\020\006\uffec\011\uffec\012\uffec" +
    "\014\uffec\015\uffec\020\uffec\022\uffec\001\002\000\010\016" +
    "\030\023\051\027\032\001\002\000\016\006\017\011\005" +
    "\014\020\015\007\020\010\022\016\001\002\000\020\006" +
    "\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\020\ufff7\022\ufff7" +
    "\001\002\000\004\012\ufffd\001\002\000\022\002\uffff\006" +
    "\uffff\011\uffff\012\uffff\014\uffff\015\uffff\020\uffff\022\uffff" +
    "\001\002\000\010\016\030\021\056\027\032\001\002\000" +
    "\016\006\017\011\005\014\020\015\007\020\010\022\016" +
    "\001\002\000\020\006\ufff8\011\ufff8\012\ufff8\014\ufff8\015" +
    "\ufff8\020\ufff8\022\ufff8\001\002\000\004\017\061\001\002" +
    "\000\020\006\uffea\011\uffea\012\uffea\014\uffea\015\uffea\020" +
    "\uffea\022\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\060\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\016\003\012\004\013\005\011\006\010\007\014" +
    "\010\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\054\012\023\013\022\001\001\000\002\001\001" +
    "\000\016\003\012\004\013\005\011\006\052\007\014\010" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\047\012\023\013\022\001\001\000" +
    "\002\001\001\000\010\011\025\012\023\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\042\012\023\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\041\013" +
    "\022\001\001\000\002\001\001\000\006\012\032\013\022" +
    "\001\001\000\002\001\001\000\004\013\040\001\001\000" +
    "\004\013\037\001\001\000\004\013\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\045" +
    "\012\023\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\012\004\013\005\051" +
    "\007\014\010\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\012" +
    "\004\013\005\056\007\014\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
 
    System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= block 
            {
              ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block d = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    // System.out.println("In Program");
                    RESULT = new ProgramNode(d);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= BEGIN stmts END 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements ss = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  //System.out.println("In Block");
                    RESULT = new Block(ss);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= stmt 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //System.out.println("In Statements -- Single");
                    RESULT = new Statements(s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt stmts 
            {
              Statements RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statements sl = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //System.out.println("In Statements");
                    sl.add(s);
                    RESULT = sl;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= variable 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //System.out.println("In Statement");
                    RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= writeStmt 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WriteStatement w = (WriteStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = w;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= readStmt 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReadStatement r = (ReadStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = r;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= WHILE expr DO stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new WhileStmt(e, s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= IF expr THEN stmt 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new IfStmt(e, s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr SUB term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term e2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("In SUB");
                    RESULT = new SubExpr(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr ADD term 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term e2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("In ADD");
                    RESULT = new AddExpr(e1, e2);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= term 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = t;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= ef 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ef f = (Ef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new Term(f);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= term MUL ef 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ef e = (Ef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new MulExpr(t, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= term DIV ef 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ef e = (Ef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new DivExpr(t, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= term MOD ef 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ef e = (Ef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT = new ModExpr(t, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ef ::= LP expr RP 
            {
              Ef RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new Ef(e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ef",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ef ::= ID 
            {
              Ef RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdTokenVal id = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("In ID");
                    RESULT = new Ef(new IdExpr(id));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ef",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ef ::= INTLITERAL 
            {
              Ef RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("In INT");
                    RESULT = new Ef(new IntExpr(i));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ef",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable ::= ID EQ expr SEM 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdTokenVal id = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    System.out.println("In Variable");
                    RESULT = new Variable(id, e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // writeStmt ::= WRITE expr SEM 
            {
              WriteStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr id = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new WriteStatement(id);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writeStmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // readStmt ::= READ ID SEM 
            {
              ReadStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdTokenVal id = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT = new ReadStatement(id);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
